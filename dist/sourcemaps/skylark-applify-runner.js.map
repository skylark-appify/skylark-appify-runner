{"version":3,"sources":["skylark-applify-runner.js"],"names":["define","skylark","loopProtect","runner","hit","line","console","warn","postMessage","parent","origin","error","args","concat","slice","call","arguments","window","alert","join","handleMessage","event","data","JSON","parse","e","message","commands","type","source","stringify","attach","proxyConsole","log","methods","prototype","forEach","method","originalArgs","arg","newArgs","i","length","push","stringifyArgs","shift","clear","apply","regex","processor","blockingMethods","kill","restore","getDoctype","str","doctype","match","tail","substr","debug","replace","m","render","options","combinedSource","realtime","requested","noRealtimeJs","includeJsInRealtime","doctypeObj","escapeMap","<",">","&","re","docReady","shortDocReady","script","code","csscode","description","title","winLoad","scriptopen","prepare","codes","lastIndex","parts","html","js","javascript","css","close","hasHTML","trim","hasCSS","hasJS","alias","test","all","split","indexOf","substring","lastIndexOf","pos","open","Sandbox","_sandbox","sandbox","init","el","cssTextTagId","reset","injectScript","url","cb","injectDOM","injectCssText","cssText","eval","cmd","isActive","active","injectCSS","console:run","console:load:script","err","console:load:dom","eventer","onload","iframe","document","createElement","setAttribute","body","appendChild","src","name","on","main"],"mappings":"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","file":"../skylark-applify-runner.js","sourcesContent":["define('skylark-applify-runner/runner',[\r\n  \"skylark-langx-ns\",\r\n   \"skylark-loopprotect\"\r\n],function (skylark,loopProtect) {\r\n  /** ============================================================================\r\n   * JS Bin Runner\r\n   * Accepts incoming postMessage events and updates a live iframe accordingly.\r\n   * ========================================================================== */\r\n  /*globals sandbox loopProtect window alert */\r\n    'use strict';\r\n    var runner = {};\r\n\r\n    /**\r\n     * Update the loop protoction hit function to send an event up to the parent\r\n     * window so we can insert it in our error UI\r\n     */\r\n    loopProtect.hit = function (line) {\r\n      console.warn('Exiting potential infinite loop at line ' + line + '. To disable loop protection: add \"// noprotect\" to your code');\r\n      runner.postMessage('loopProtectHit', line);\r\n    }\r\n\r\n    /**\r\n     * Store what parent origin *should* be\r\n     */\r\n    runner.parent = {};\r\n    runner.parent.origin = '*';\r\n\r\n    /**\r\n     * Log error messages, indicating that it's from the runner.\r\n     */\r\n    runner.error = function () {\r\n      var args = ['Runner:'].concat([].slice.call(arguments));\r\n      if (!('console' in window)) {return alert(args.join(' '));}\r\n      //window.console.error.apply(console, args);\r\n    };\r\n\r\n    /**\r\n     * Handle all incoming postMessages to the runner\r\n     */\r\n    runner.handleMessage = function (event) {\r\n      if (!event.origin) {return;}\r\n      var data = event.data;\r\n      try {\r\n        data = typeof event.data === 'string' ? JSON.parse(event.data) : event.data;\r\n      } catch (e) {\r\n        return runner.error('Error parsing event data:', e.message);\r\n      }\r\n      if (runner.commands && typeof runner.commands[data.type] !== 'function') {\r\n        return runner.error('No matching event handler:', data.type);\r\n      }\r\n      runner.parent.source = event.source;\r\n      try {\r\n        runner.commands[data.type](data.data);\r\n      } catch (e) {\r\n        runner.error(e.message);\r\n      }\r\n    };\r\n\r\n    /**\r\n     * Send message to the parent window\r\n     */\r\n    runner.postMessage = function (type, data) {\r\n      if (!runner.parent.source) {\r\n        return runner.error('No postMessage connection to parent window.');\r\n      }\r\n      runner.parent.source.postMessage(JSON.stringify({\r\n        type: type,\r\n        data: data\r\n      }), runner.parent.origin);\r\n    };\r\n\r\n     return skylark.attach(\"appify.runner\", runner);\r\n\r\n});\ndefine('skylark-applify-runner/proxy-console',[\r\n   \"./runner\"\r\n],function (runner) {\r\n    'use strict';\r\n  /** =========================================================================\r\n   * Console\r\n   * Proxy console.logs out to the parent window\r\n   * ========================================================================== */\r\n\r\n  var proxyConsole = (function () {\r\n    'use strict';\r\n    /*global stringify, runner*/\r\n    var supportsConsole = true;\r\n    try { window.console.log('d[ o_0 ]b'); } catch (e) { supportsConsole = false; }\r\n\r\n    var proxyConsole = function() {};\r\n\r\n    /**\r\n     * Stringify all of the console objects from an array for proxying\r\n     */\r\n    var stringifyArgs = function (args) {\r\n      var newArgs = [];\r\n      // TODO this was forEach but when the array is [undefined] it wouldn't\r\n      // iterate over them\r\n      var i = 0, length = args.length, arg;\r\n      for(; i < length; i++) {\r\n        arg = args[i];\r\n        if (typeof arg === 'undefined') {\r\n          newArgs.push('undefined');\r\n        } else {\r\n          newArgs.push(JSON.stringify(arg));  // stringify => JSON.stringify\r\n        }\r\n      }\r\n      return newArgs;\r\n    };\r\n\r\n    // Create each of these methods on the proxy, and postMessage up to JS Bin\r\n    // when one is called.\r\n    var methods = proxyConsole.prototype.methods = [\r\n      'debug', 'clear', 'error', 'info', 'log', 'warn', 'dir', 'props', '_raw',\r\n      'group', 'groupEnd', 'dirxml', 'table', 'trace', 'assert', 'count',\r\n      'markTimeline', 'profile', 'profileEnd', 'time', 'timeEnd', 'timeStamp',\r\n      'groupCollapsed'\r\n    ];\r\n\r\n    methods.forEach(function (method) {\r\n      // Create console method\r\n      proxyConsole.prototype[method] = function () {\r\n        // Replace args that can't be sent through postMessage\r\n        var originalArgs = [].slice.call(arguments),\r\n            args = stringifyArgs(originalArgs);\r\n\r\n        // Post up with method and the arguments\r\n        runner.postMessage('console', {\r\n          method: method === '_raw' ? originalArgs.shift() : method,\r\n          args: method === '_raw' ? args.slice(1) : args\r\n        });\r\n\r\n        // If the browner supports it, use the browser console but ignore _raw,\r\n        // as _raw should only go to the proxy console.\r\n        // Ignore clear if it doesn't exist as it's beahviour is different than\r\n        // log and we let it fallback to jsconsole for the panel and to nothing\r\n        // for the browser console\r\n        if (window.console) {\r\n          if (!console[method]) {\r\n            method = 'log';\r\n          }\r\n\r\n          if (window.console && method !== '_raw') {\r\n            if (method !== 'clear' || (method === 'clear' && console.clear)) {\r\n              console[method].apply(console, originalArgs);\r\n            }\r\n          }\r\n        }\r\n      };\r\n    });\r\n\r\n    return new proxyConsole();\r\n\r\n  }());\r\n\r\n  return runner.proxyConsole = proxyConsole;\r\n});\ndefine('skylark-applify-runner/processor',[\r\n   \"skylark-loopprotect\",\r\n   \"./runner\"\r\n],function (loopProtect, runner) {\r\n    'use strict';\r\n  /** =========================================================================\r\n   * Processor\r\n   * Modify the prepared source ready to be written to an iframe\r\n   * ========================================================================== */\r\n\r\n    var processor = {};\r\n\r\n    processor.blockingMethods = {\r\n      kill: '<script>(function(){window.__blocked={methods:[\"open\",\"print\",\"alert\",\"prompt\",\"confirm\"],old:{}};for(var m in __blocked.methods){try {__blocked.old[m]=window[m];window[m]=function(){};}catch(e){}}})()</script>',\r\n      // RS: the empty comment in the end of the harness, ensures any\r\n      // open comments are closed, and will ensure the harness is hidden\r\n      // from the user.\r\n      restore: '<!--jsbin live harness--><script>(function(){for(var m in __blocked.methods){try{window[m]=__blocked.old[m];delete __blocked;}catch(e){}};})()</script>'\r\n    };\r\n\r\n    /**\r\n     * Grab the doctype from a string.\r\n     *\r\n     * Returns an object with doctype and tail keys.\r\n     */\r\n    processor.getDoctype = (function () {\r\n      // Cached regex\r\n      // [\\s\\S] matches multiline doctypes\r\n      var regex = /<!doctype [\\s\\S]*?>/i;\r\n      return function (str) {\r\n        var doctype = (str.match(regex) || [''])[0],\r\n            tail = str.substr(doctype.length);\r\n        return {\r\n          doctype: doctype,\r\n          tail: tail\r\n        };\r\n      };\r\n    }());\r\n\r\n    /**\r\n     * Replace HTML characters with encoded equivatents for debug mode.\r\n     */\r\n    processor.debug = function (source) {\r\n      return '<pre>' + source.replace(/[<>&]/g, function (m) {\r\n        if (m == '<') return '&lt;';\r\n        if (m == '>') return '&gt;';\r\n        if (m == '&') return '&amp;';\r\n      }) + '</pre>';\r\n    };\r\n\r\n    /**\r\n     * Render – build the final source code to be written to the iframe. Takes\r\n     * the original source and an options object.\r\n     */\r\n    processor.render = function (source, options) {\r\n\r\n      options = options || {};\r\n      source = source || '';\r\n\r\n      var combinedSource = [],\r\n          realtime = (options.requested !== true),\r\n          noRealtimeJs = (options.includeJsInRealtime === false);\r\n\r\n      // If the render was realtime and we don't want javascript in realtime\r\n      // renders – Auto-run JS is unchecked – then strip out the Javascript\r\n      if (realtime && noRealtimeJs) {\r\n        source = source.replace(/<script\\b[^<]*(?:(?!<\\/script>)<[^<]*)*<\\/script>/gi, '');\r\n      }\r\n\r\n      // Strip autofocus from the markup, preventing the focus switching out of\r\n      // the editable area.\r\n      source = source.replace(/(<.*?\\s)(autofocus)/g, '$1');\r\n\r\n      // Make sure the doctype is the first thing in the source\r\n      var doctypeObj = processor.getDoctype(source),\r\n          doctype = doctypeObj.doctype;\r\n      source = doctypeObj.tail;\r\n      combinedSource.push(doctype);\r\n\r\n      // Kill the blocking functions\r\n      // IE requires that this is done in the script, rather than off the window\r\n      // object outside of the doc.write.\r\n      if (realtime && options.includeJsInRealtime) {\r\n        combinedSource.push(processor.blockingMethods.kill);\r\n      }\r\n\r\n      // Push the source, split from the doctype above.\r\n      combinedSource.push(source);\r\n\r\n      // Restore the blocking functions\r\n      if (realtime && options.includeJsInRealtime) {\r\n        combinedSource.push(processor.blockingMethods.restore);\r\n      }\r\n\r\n      // In debug mode return an escaped version\r\n      if (options.debug) {\r\n        return processor.debug(combinedSource.join('\\n'));\r\n      }\r\n\r\n      return combinedSource.join('\\n');\r\n\r\n    };\r\n\r\n\r\n    //moved from render/live.js(getPreparedCode)\r\n    var escapeMap = {\r\n      '<': '&lt;',\r\n      '>': '&gt;',\r\n      '&': '&amp;'\r\n    }, re = {\r\n        docReady: /\\$\\(document\\)\\.ready/,\r\n        shortDocReady: /\\$\\(function/,\r\n        console: /(^.|\\b)console\\.(\\S+)/g,\r\n\r\n        script: /<\\/script/ig,\r\n        code: /%code%/,\r\n        csscode: /%css%/,\r\n\r\n        description: /(<meta name=\"description\" content=\")([^\"]*)/im,\r\n        title: /<title>(.*)<\\/title>/im,\r\n        winLoad: /window\\.onload\\s*=/,\r\n        scriptopen: /<script/gi\r\n    };\r\n\r\n    processor.prepare = function(codes) {\r\n      // reset all the regexp positions for reuse\r\n      re.docReady.lastIndex = 0;\r\n      re.shortDocReady.lastIndex = 0;\r\n      re.console.lastIndex = 0;\r\n      re.script.lastIndex = 0;\r\n      re.code.lastIndex = 0;\r\n      re.csscode.lastIndex = 0;\r\n      re.title.lastIndex = 0;\r\n      re.winLoad.lastIndex = 0;\r\n      re.scriptopen.lastIndex = 0;\r\n\r\n      var parts = [],\r\n          html = codes.html,\r\n          js = codes.javascript || '',\r\n          css = codes.css,\r\n          close = '',\r\n          hasHTML = !!html.trim().length,\r\n          hasCSS = !!css.trim().length,\r\n          hasJS = !!js.trim().length,\r\n          replaceWith = 'window.runnerWindow.proxyConsole.';\r\n\r\n      // this is used to capture errors with processors, sometimes their errors\r\n      // aren't useful (Script error. (line 0) #1354) so we try/catch and then\r\n      // throw the real error. This also works exactly as expected with non-\r\n      // processed JavaScript\r\n      if (hasHTML) {\r\n        js = 'try {' + js + '\\n} catch (error) { throw error; }';\r\n      }\r\n\r\n      loopProtect.alias = 'window.runnerWindow.protect';\r\n\r\n      // Rewrite loops to detect infiniteness.\r\n      // This is done by rewriting the for/while/do loops to perform a check at\r\n      // the start of each iteration.\r\n      js = loopProtect(js);\r\n\r\n      // escape any script tags in the JS code, because that'll break the mushing together\r\n      js = js.replace(re.script, '<\\\\/script');\r\n\r\n      // redirect console logged to our custom log while debugging\r\n      if (re.console.test(js)) {\r\n        // yes, this code looks stupid, but in fact what it does is look for\r\n        // 'console.' and then checks the position of the code. If it's inside\r\n        // an openning script tag, it'll change it to window.top._console,\r\n        // otherwise it'll leave it.\r\n        js = js.replace(re.console, function (all, str, arg) {\r\n          return replaceWith + arg;\r\n        });\r\n      }\r\n\r\n      // note that I'm using split and reconcat instead of replace, because if\r\n      // the js var contains '$$' it's replaced to '$' - thus breaking Prototype\r\n      // code. This method gets around the problem.\r\n      if (!hasHTML && hasJS) {\r\n        html = '<pre>\\n' + js.replace(/[<>&]/g, function (m) {\r\n          return escapeMap[m];\r\n        }) + '</pre>';\r\n      } else if (re.code.test(html)) {\r\n        html = html.split('%code%').join(code.javascript);\r\n      } else if (hasJS) {\r\n        close = '';\r\n        if (html.indexOf('</body>') !== -1) {\r\n          parts.push(html.substring(0, html.lastIndexOf('</body>')));\r\n          parts.push(html.substring(html.lastIndexOf('</body>')));\r\n\r\n          html = parts[0];\r\n          close = parts.length === 2 && parts[1] ? parts[1] : '';\r\n        }\r\n\r\n        // TODO\r\n        ///var type = jsbin.panels.named.javascript.type ? ' type=\"text/' + jsbin.panels.named.javascript.type + '\"' : '';\r\n        /// js += '\\n\\n//# sourceURL=' + jsbin.state.code + '.js';\r\n        var type = \"text/script\";\r\n\r\n        html += '<script' + type + '>' + js + '\\n</script>\\n' + close;\r\n      }\r\n\r\n      // reapply the same proxyConsole - but to all the html code, since\r\n      if (re.console.test(html)) {\r\n        // yes, this code looks stupid, but in fact what it does is look for\r\n        // 'console.' and then checks the position of the code. If it's inside\r\n        // an openning script tag, it'll change it to window.top._console,\r\n        // otherwise it'll leave it.\r\n        var first = ' /* double call explained https://github.com/jsbin/jsbin/issues/1833 */';\r\n        html = html.replace(re.console, function (all, str, arg, pos) {\r\n          var open = html.lastIndexOf('<script', pos),\r\n              close = html.lastIndexOf('</script', pos),\r\n              info = first;\r\n\r\n          first = null;\r\n\r\n          if (open > close) {\r\n            return replaceWith + arg;\r\n          } else {\r\n            return all;\r\n          }\r\n        });\r\n      }\r\n\r\n      if (!hasHTML && !hasJS && hasCSS) {\r\n        html = '<pre>\\n' + css.replace(/[<>&]/g, function (m) {\r\n          return escapeMap[m];\r\n        }) + '</pre>';\r\n      } else if (re.csscode.test(html)) {\r\n        html = html.split('%css%').join(css);\r\n      } else if (hasHTML) {\r\n        parts = [];\r\n        close = '';\r\n        if (html.indexOf('</head>') !== -1) {\r\n          parts.push(html.substring(0, html.indexOf('</head>')));\r\n          parts.push(html.substring(html.indexOf('</head>')));\r\n\r\n          html = parts[0];\r\n          close = parts.length === 2 && parts[1] ? parts[1] : '';\r\n        }\r\n\r\n        // if the focused panel is CSS, then just return the css NOW\r\n        ///if (jsbin.state.hasBody && jsbin.panels.focused.id === 'css') {\r\n        ///  return css;\r\n        ///}\r\n\r\n        html += '<style id=\"jsbin-css\">\\n' + css + '\\n</style>\\n' + close;\r\n      }\r\n\r\n      // Add defer to all inline script tags in IE.\r\n      // This is because IE runs scripts as it loads them, so variables that\r\n      // scripts like jQuery add to the global scope are undefined.\r\n      // See http://jsbin.com/ijapom/5\r\n      ///if (jsbin.ie && re.scriptopen.test(html)) {\r\n      ///  html = html.replace(/<script(.*?)>/gi, function (all, match) {\r\n      ///    if (match.indexOf('src') !== -1) {\r\n      ///      return all;\r\n      ///    } else {\r\n      ///      return '<script defer' + match + '>';\r\n      ///    }\r\n      ///  });\r\n      ///}\r\n\r\n      return html;\r\n    };\r\n\r\n    return runner.processor = processor;\r\n\r\n});\r\n\ndefine('skylark-applify-runner/sandbox',[\r\n   \"skylark-loopprotect\",\r\n   \"skylark-domx-plugins-sandboxs/sandbox\",\r\n   \"./runner\",\r\n   \"./proxy-console\",\r\n   \"./processor\"\r\n],function (loopProtect,Sandbox,runner,proxyConsole,processor) {\r\n    'use strict';\r\n  /** ============================================================================\r\n   * Sandbox\r\n   * Handles creating and insertion of dynamic iframes\r\n   * ========================================================================== */\r\n   /*\r\n\r\n    var sandbox = {};\r\n\r\n\r\n    sandbox.target = null;\r\n    sandbox.old = null;\r\n    sandbox.active = null;\r\n    sandbox.state = {};\r\n    sandbox.guid = +new Date(); // id used to keep track of which iframe is active\r\n\r\n\r\n    sandbox.create = function () {\r\n      var iframe = document.createElement('iframe');\r\n      // iframe.src = window.location.origin + '/runner-inner';\r\n      iframe.setAttribute('sandbox', 'allow-modals allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts');\r\n      iframe.setAttribute('frameBorder', '0');\r\n      iframe.setAttribute('name', 'JS Bin Output ');\r\n      iframe.id = sandbox.guid++;\r\n      // sandbox.active = iframe;\r\n      return iframe;\r\n    };\r\n\r\n    sandbox.use = function (iframe, done) {\r\n      if (!sandbox.target) {\r\n        throw new Error('Sandbox has no target element.');\r\n      }\r\n      sandbox.old = sandbox.active;\r\n      sandbox.saveState(sandbox.old);\r\n      sandbox.active = iframe;\r\n      utils.prependChild(sandbox.target, iframe);\r\n      // setTimeout allows the iframe to be rendered before other code runs,\r\n      // allowing us access to the calculated properties like innerWidth.\r\n      setTimeout(function () {\r\n        // call the code that renders the iframe source\r\n        if (done) {\r\n          done();\r\n        }\r\n\r\n        // remove *all* the iframes, baring the active one\r\n        var iframes = sandbox.target.getElementsByTagName('iframe');\r\n        var length = iframes.length;\r\n        var i = 0;\r\n        var id = sandbox.active.id;\r\n        var iframe;\r\n\r\n        for (; iframe = iframes[i], i < length; i++) {\r\n          if (iframe.id !== id) {\r\n            iframe.parentNode.removeChild(iframe);\r\n            length--;\r\n          }\r\n        }\r\n      }, 0);\r\n    };\r\n\r\n\r\n    sandbox.restoreState = function (iframe, state) {\r\n      if (!iframe) return {};\r\n      var win = utils.getIframeWindow(iframe);\r\n      if (!win) return {};\r\n      if (state.scroll) {\r\n        win.scrollTo(state.scroll.x, state.scroll.y);\r\n      }\r\n    };\r\n\r\n\r\n    sandbox.saveState = function (iframe) {\r\n      if (!iframe) return {};\r\n      var win = utils.getIframeWindow(iframe);\r\n      if (!win) return {};\r\n      return {\r\n        scroll: {\r\n          x: win.scrollX,\r\n          y: win.scrollY\r\n        }\r\n      };\r\n    };\r\n\r\n\r\n    sandbox.wrap = function (childWindow, options) {\r\n      if (!childWindow) return;\r\n      options = options || {};\r\n\r\n      // Notify the parent of resize events (and send one straight away)\r\n      utils.addEvent(childWindow, 'resize', utils.throttle(function () {\r\n        runner.postMessage('resize', sandbox.getSizeProperties(childWindow));\r\n      }, 25));\r\n\r\n      runner.postMessage('resize', sandbox.getSizeProperties(childWindow));\r\n\r\n      // Notify the parent of a focus\r\n      utils.addEvent(childWindow, 'focus', function () {\r\n        runner.postMessage('focus');\r\n      });\r\n\r\n    };\r\n\r\n    sandbox.getSizeProperties = function (childWindow) {\r\n      return {\r\n        width: childWindow.innerWidth || childWindow.document.documentElement.clientWidth,\r\n        height: childWindow.innerHeight || childWindow.document.documentElement.clientHeight,\r\n        offsetWidth: childWindow.document.documentElement.offsetWidth,\r\n        offsetHeight: childWindow.document.documentElement.offsetHeight\r\n      };\r\n    };\r\n\r\n\r\n    sandbox.eval = function (cmd) {\r\n      if (!sandbox.active) throw new Error(\"sandbox.eval: has no active iframe.\");\r\n\r\n      var re = /(^.|\\b)console\\.(\\S+)/g;\r\n\r\n      if (re.test(cmd)) {\r\n        var replaceWith = 'window.runnerWindow.proxyConsole.';\r\n        cmd = cmd.replace(re, function (all, str, arg) {\r\n          return replaceWith + arg;\r\n        });\r\n      }\r\n\r\n      var childWindow = sandbox.active.contentWindow;\r\n      var output = null,\r\n          type = 'log';\r\n      try {\r\n        output = childWindow.eval(cmd);\r\n      } catch (e) {\r\n        output = e.message;\r\n        type = 'error';\r\n      }\r\n\r\n      return proxyConsole[type](output);\r\n    };\r\n\r\n\r\n    sandbox.injectScript = function (url, cb) {\r\n      if (!sandbox.active) throw new Error(\"sandbox.injectScript: has no active iframe.\");\r\n      var childWindow = sandbox.active.contentWindow,\r\n          childDocument = childWindow.document;\r\n      var script = childDocument.createElement('script');\r\n      script.src = url;\r\n      script.onload = function () {\r\n        cb();\r\n      };\r\n      script.onerror = function () {\r\n        cb('Failed to load \"' + url + '\"');\r\n      };\r\n      childDocument.body.appendChild(script);\r\n    };\r\n\r\n\r\n    sandbox.injectDOM = function (html, cb) {\r\n      if (!sandbox.active) throw new Error(\"sandbox.injectDOM: has no active iframe.\");\r\n      var childWindow = sandbox.active.contentWindow,\r\n          childDocument = childWindow.document;\r\n      try {\r\n        childDocument.body.innerHTML = html;\r\n      } catch (e) {\r\n        cb(\"Failed to load DOM.\");\r\n      }\r\n      cb();\r\n    };\r\n\r\n    */\r\n\r\n    var _sandbox;\r\n\r\n\r\n\r\n    return runner.sandbox = {\r\n      init : function(el,options) {\r\n        _sandbox = new Sandbox(el,{\r\n          cssTextTagId : options.cssTextTagId, ///'jsbin-css'\r\n        });\r\n      },\r\n\r\n      /**\r\n       * Render a new preview iframe using the posted source\r\n       */\r\n      render : function (data) {\r\n        /*\r\n        // if we're just changing CSS, let's try to inject the change\r\n        // instead of doing a full render\r\n        if (data.options.injectCSS) {\r\n          if (sandbox.active) {\r\n            var style = sandbox.active.contentDocument.getElementById('jsbin-css');\r\n            if (style) {\r\n              ///style.innerHTML = data.source; // lwf\r\n              style.innerHTML = data.source || (data.codes && data.codes.css);\r\n              return;\r\n            }\r\n          }\r\n        }\r\n\r\n        var iframe = sandbox.create(data.options);\r\n        sandbox.use(iframe, function () {\r\n          var childDoc = iframe.contentDocument,\r\n              childWindow = utils.getIframeWindow(iframe);\r\n          if (!childDoc) childDoc = childWindow.document;\r\n\r\n          // Reset the console to the prototype state\r\n          proxyConsole.methods.forEach(function (method) {\r\n            delete proxyConsole[method];\r\n          });\r\n\r\n\r\n          // Process the source according to the options passed in\r\n          if (!data.source && data.codes) { // added by lwf\r\n            data.source = processor.prepare(data.codes);\r\n          }\r\n          var source = processor.render(data.source, data.options);\r\n\r\n          // Start writing the page. This will clear any existing document.\r\n          childDoc.open();\r\n\r\n          // We need to write a blank line first – Firefox blows away things you add\r\n          // to the child window when you do the fist document.write.\r\n          // Note that each document.write fires a DOMContentLoaded in Firefox.\r\n          // This method exhibits synchronous and asynchronous behaviour, depending\r\n          // on the browser. Urg.\r\n          childDoc.write('');\r\n\r\n          // Give the child a reference to things it needs. This has to go here so\r\n          // that the user's code (that runs as a result of the following\r\n          // childDoc.write) can access the objects.\r\n          childWindow.runnerWindow = {\r\n            proxyConsole: proxyConsole,\r\n            protect: loopProtect,\r\n          };\r\n\r\n          childWindow.console = proxyConsole;\r\n\r\n          // Reset the loop protection before rendering\r\n          loopProtect.reset(); //TODO:\r\n\r\n          // if there's a parse error this will fire\r\n          childWindow.onerror = function (msg, url, line, col, error) {\r\n            // show an error on the jsbin console, but not the browser console\r\n            // (i.e. use _raw), because the browser will throw the native error\r\n            // which (hopefully) includes a link to the JavaScript VM at that time.\r\n            proxyConsole._raw('error', error && error.stack ? error.stack : msg + ' (line ' + line + ')');\r\n          };\r\n\r\n          // Write the source out. IE crashes if you have lots of these, so that's\r\n          // why the source is rendered above (processor.render) – it should be one\r\n          // string. IE's a sensitive soul.\r\n          childDoc.write(source);\r\n          // childDoc.documentElement.innerHTML = source;\r\n\r\n          // Close the document. This will fire another DOMContentLoaded.\r\n          childDoc.close();\r\n\r\n          runner.postMessage('complete');\r\n\r\n          // Setup the new window\r\n          sandbox.wrap(childWindow, data.options);\r\n        });\r\n        */\r\n\r\n        // Reset the loop protection before rendering\r\n        loopProtect.reset(); //TODO:\r\n\r\n        // Process the source according to the options passed in\r\n        if (!data.source && data.codes) { // added by lwf\r\n          data.source = processor.prepare(data.codes);\r\n        }\r\n        var source = processor.render(data.source, data.options);\r\n\r\n        data.options.proxyConsole = proxyConsole;\r\n        data.options.loopProtect = loopProtect;\r\n\r\n        _sandbox.render(source,data.options);\r\n\r\n        runner.postMessage('complete');\r\n\r\n      },\r\n\r\n      injectScript : function (url, cb) {\r\n        return _sandbox.injectScript(url,cb);\r\n      },\r\n\r\n      injectDOM : function (html, cb)  {\r\n        return _sandbox.injectDOM(html,cb);\r\n      },\r\n      \r\n      injectCssText : function(cssText) {\r\n        return _sandbox.injectCssText(cssText);\r\n      },\r\n      \r\n      eval : function(cmd){\r\n        return _sandbox.eval(cmd);\r\n      },\r\n\r\n      isActive : function() {\r\n        return !!_sandbox.active;\r\n      }\r\n\r\n    };\r\n\r\n});\ndefine('skylark-applify-runner/commands',[\r\n   \"./runner\",\r\n   \"./sandbox\",\r\n],function (runner,sandbox) {\r\n  /** ============================================================================\r\n   * JS Bin Runner\r\n   * Accepts incoming postMessage events and updates a live iframe accordingly.\r\n   * ========================================================================== */\r\n  /*globals sandbox loopProtect window alert */\r\n    'use strict';\r\n\r\n    var commands = {};\r\n\r\n    /**\r\n     * Render a new preview iframe using the posted source\r\n     */\r\n    commands.render = function (data) {\r\n      if (data.options.injectCSS && sandbox.isActive()) {\r\n        let cssText =  data.source || (data.codes && data.codes.css);\r\n        return sandbox.injectCssText(cssText);\r\n      }\r\n      return sandbox.render(data);\r\n    };\r\n\r\n    /**\r\n     * Run console commands against the iframe's scope\r\n     */\r\n    commands['console:run'] = function (cmd) {\r\n      sandbox.eval(cmd);\r\n    };\r\n\r\n    /**\r\n     * Load script into the apge\r\n     */\r\n    commands['console:load:script'] = function (url) {\r\n      sandbox.injectScript(url, function (err) {\r\n        if (err) return runner.postMessage('console:load:script:error', err);\r\n        runner.postMessage('console:load:script:success', url);\r\n      });\r\n    };\r\n\r\n    /**\r\n     * Load DOM into the apge\r\n     */\r\n    commands['console:load:dom'] = function (html) {\r\n      sandbox.injectDOM(html, function (err) {\r\n        if (err) return runner.postMessage('console:load:dom:error', err);\r\n        runner.postMessage('console:load:dom:success');\r\n      });\r\n    };\r\n\r\n    return runner.commands = commands;\r\n\r\n});\ndefine('skylark-applify-runner/init',[\r\n  \"skylark-domx-eventer\",\r\n  \"./runner\",\r\n  \"./sandbox\",\r\n],function(eventer,runner,sandbox){\r\n    'use strict';\r\n\r\n\r\n  /** =========================================================================\r\n   * JS Bin Runner\r\n   * ========================================================================== */\r\n  function init(el,options) {\r\n\r\n\r\n    window.onload = function () {\r\n      // from index.js\r\n\r\n      /**\r\n       * Live rendering, basic mode.\r\n       * Fallback - load the bin into a new iframe, and let it keep itself up\r\n       * to date using event stream.\r\n       */\r\n      if (!window.postMessage) {\r\n        var iframe = document.createElement('iframe');\r\n        iframe.setAttribute('sandbox', 'allow-modals allow-forms allow-pointer-lock allow-popups allow-same-origin allow-scripts');\r\n        iframe.setAttribute('frameBorder', '0');\r\n        document.body.appendChild(iframe);\r\n        iframe.src = window.name;\r\n        return;\r\n      }\r\n\r\n      /**\r\n       * Live rendering, postMessage style.\r\n       */\r\n\r\n      // Set the sandbox target\r\n      ///sandbox.target = document.getElementById('sandbox-wrapper');\r\n      ///sandbox.init(document.getElementById('sandbox-wrapper'),options);\r\n      sandbox.init(el,options);\r\n      // Hook into postMessage\r\n      eventer.on(window, 'message', runner.handleMessage);\r\n\r\n    };\r\n\r\n  }\r\n\r\n  return runner.init = init;\r\n\r\n});\r\n\ndefine('skylark-applify-runner/main',[\r\n\t\"./runner\",\r\n\t\"./commands\",\r\n\t\"./processor\",\r\n\t\"./proxy-console\",\r\n\t\"./runner\",\r\n\t\"./sandbox\",\r\n\t\"./init\"\r\n],function(runner){\r\n\treturn runner;\r\n});\ndefine('skylark-applify-runner', ['skylark-applify-runner/main'], function (main) { return main; });\n\n"]}